# PlatformIO pre-script to inject version info from Git
import subprocess
import os

Import('env')

def git(cmd):
    try:
        return subprocess.check_output(cmd, shell=True, stderr=subprocess.DEVNULL).decode('utf-8').strip()
    except Exception:
        return ''

# Read git describe or fallback to short hash
version = git('git describe --tags --dirty --always') or git('git rev-parse --short HEAD') or 'dev'
commit = git('git rev-parse --short HEAD') or 'unknown'
branch = git('git rev-parse --abbrev-ref HEAD') or ''

# Optional: strip leading 'v'
if version.startswith('v'):
    version = version[1:]

# Build time
from datetime import datetime
build_time = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')

# Inject as C/C++ macros safely
# Note: We rely on a generated header for version constants to avoid quoting issues on Windows toolchains.

# Additionally write a header to avoid any quoting issues in some shells/toolchains
inc_dir = os.path.join(env['PROJECT_DIR'], 'include')
os.makedirs(inc_dir, exist_ok=True)
hdr_path = os.path.join(inc_dir, 'version_auto.h')
with open(hdr_path, 'w', encoding='utf-8') as f:
    f.write('// Auto-generated by scripts/git_version.py\n')
    f.write('#pragma once\n')
    f.write('#define FW_VERSION "%s"\n' % version)
    f.write('#define GIT_COMMIT "%s"\n' % commit)
    f.write('#define GIT_BRANCH "%s"\n' % branch)
    f.write('#define BUILD_TIME "%s"\n' % build_time)
